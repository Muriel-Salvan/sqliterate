require 'sql/atoms'
require 'sql/keywords'
require 'sql/expression'

module Sql
  grammar Select
    include Atoms
    include Keywords
    include Expression

    rule select_query
      space with_section space select_section space {
        def value
          { with: with_section.value,
            select: select_section.value }
        end
      }
    end

    rule with_section
      with_kw required_space with_queries {
        def value
          with_queries.value
        end
      }
      /
      space {
        def value
          nil
        end
      }
    end

    rule with_queries
      with_query space [,]+ space with_queries {
        def value
          with_query.value + with_queries.value
        end
      }
      /
      with_query
    end

    rule with_query
      identifier required_space as_kw required_space '(' space select_query space ')' {
        def value
          [[ identifier.value, select_query.value ]]
        end
      }
    end

    rule select_section
      select_kw required_space select_list space table_expression {
        def value
          { columns: select_list.value,
            table: table_expression.value }
        end
      }
    end

    rule select_list
      column_expression space [,]+ space select_list {
        def value
          column_expression.value + select_list.value
        end
      }
      /
      column_expression
    end

    rule column_expression
      id:identifier {
        def value
          [id.value]
        end
      }
    end

    rule table_expression
      from_clause space where_clause space group_clause {
        def value
          { from: from_clause.value,
            where: where_clause.value,
            group: group_clause.value }
        end
      }
    end

    rule from_clause
      from_kw required_space table_references {
        def value
          { tables: table_references.value }
        end
      }
      /
      space {
        def value
          nil
        end
      }
    end

    rule where_clause
      where_kw required_space boolean_expression {
        def value
          boolean_expression.value
        end
      }
      /
      space {
        def value
          nil
        end
      }
    end

    rule group_clause
      space {
        def value
          nil
        end
      }
    end

    rule table_references
      table_reference space [,]+ space table_references {
        def value
          table_reference.value + table_references.value
        end
      }
      /
      table_reference
    end

    rule table_reference
      table_spec required_space (as_kw required_space)? table_name {
        def value
          [[ table_name.value, table_spec.value ]]
        end
      }
      /
      expr:table_spec {
        def value
          [[ nil, expr.value ]]
        end
      }
    end

    rule table_spec
      table_qualified_name
      /
      table_subquery
      /
      table_join
    end

    rule table_qualified_name
      database_name '.' table_name {
        def value
          [ database_name.value, table_name.value ]
        end
      }
      /
      t:table_name {
        def value
          [ nil, t.value ]
        end
      }
    end

    rule database_name
      identifier { def value; text_value end }
    end

    rule table_name
      identifier { def value; text_value end }
    end

    rule table_subquery
      '(' space select_query space ')'
    end

    rule table_join
      table_reference required_space join_type space join_kw
      required_space table_reference required_space on_kw
      required_space boolean_expression
      /
      table_reference required_space join_type space join_kw
      required_space table_reference required_space using_kw
      space '(' join_column_list ')'
      /
      table_reference required_space natural_kw required_space
      join_type space join_kw required_space table_reference
    end

    rule join_column_list
      space
    end

    rule join_type
      inner_join / outer_join (required_space outer_kw)?
    end

    rule inner_join
      inner_kw
    end

    rule outer_join
      left_kw / right_kw / full_kw
    end
  end
end
