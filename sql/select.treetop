require 'sql/atoms'
require 'sql/keywords'
require 'sql/simple_expression'

module Sql
  grammar Select
    include Atoms
    include Keywords
    include Expression

    rule select_query
      space with_section space select_section space {
        def subqueries
          with_section.tables
        end
        def columns
          select_section.columns
        end
        def tables
          select_section.tables
        end
        def to_s
          "#{subqueries} | #{columns} | #{tables}"
        end
      }
    end

    rule with_section
      with_kw required_space with_queries {
        def tables
          with_queries.tables
        end
      }
      /
      space {
        def tables
          []
        end
      }
    end

    rule with_queries
      with_query r:( space ',' space with_query )* {
        def tables
          [with_query.table] + r.elements.map { |e| e.with_query.table }
        end
      }
    end

    rule with_query
      identifier required_space as_kw required_space '(' space select_query space ')' {
        def table
          [ identifier.name, select_query.tables ]
        end
      }
    end

    rule select_section
      select_kw required_space select_list space table_expression {
        def columns
          select_list.columns
        end
        def tables
          table_expression.tables
        end
      }
    end

    rule select_list
      column_expression r:( space ',' space column_expression)* {
        def columns
          [column_expression.value] + r.elements.map do |e|
            e.column_expression.value
          end
        end
      }
    end

    rule column_expression
      identifier { def value; name end }
    end

    rule table_expression
      from_clause space where_clause space group_clause {
        def tables
          from_clause.tables
        end
        def filter
          where_clause.predicate
        end
      }
    end

    rule from_clause
      from_kw required_space table_references {
        def tables
          table_references.tables
        end
      }
      /
      space {
        def tables
          []
        end
      }
    end

    rule where_clause
      where_kw required_space boolean_expression {
        def predicate
          boolean_expression.value
        end
      }
      /
      space { def predicate; nil end }
    end

    rule group_clause
      space
    end

    rule table_references
      table_reference r:( space ',' space table_reference )* {
        def tables
          [ table_reference.table ] + r.elements.map { |e| e.table_reference.table }
        end
      }
    end

    rule table_reference
      table_spec required_space (as_kw required_space)? table_name {
        def table
          [ table_name.name, table_spec.spec ]
        end
      }
      /
      table_spec {
        def table
          [ nil, spec ]
        end
      }
    end

    rule table_spec
      '(' space select_query space ')' { def spec; :subquery end }
      /
      table_qualified_name !join_assertion {
        def spec
          table_qualified_name.name 
        end
      }
      /
      table_join { def spec; :join end }
    end

    rule join_assertion
      space (natural_kw / join_type)
    end

    rule table_qualified_name
      database_name '.' table_name {
        def name
          [ database_name.name, table_name.name ]
        end
      }
      /
      t:table_name {
        def name
          [ nil, t.name ]
        end
      }
    end

    rule database_name
      identifier
    end

    rule table_name
      identifier
    end

    rule table_join
      table_reference required_space join_type space join_kw
      required_space table_reference required_space on_kw
      required_space boolean_expression
      /
      table_reference required_space join_type space join_kw
      required_space table_reference required_space using_kw
      space '(' join_column_list ')'
      /
      table_reference required_space natural_kw required_space
      join_type space join_kw required_space table_reference
    end

    rule join_column_list
      space
    end

    rule join_type
      inner_join / outer_join (required_space outer_kw)?
    end

    rule inner_join
      inner_kw
    end

    rule outer_join
      left_kw / right_kw / full_kw
    end
  end
end
