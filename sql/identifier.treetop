module Sql
  grammar Identifier
    include Keywords

    rule identifier
      wildcard_identifier / literal_identifier / quoted_identifier
    end

    rule wildcard_identifier
      '*' {
        def name
          :all
        end
      }
    end

    rule literal_identifier
      !keyword [\p{Alpha}_] [\p{Alnum}_$]* {
        def name
          text_value
        end
      }
    end

    rule quoted_identifier
      '"' c:( identifier_char )* '"' {
        def name
          c.elements.map(&:character).join
        end
      }
    end

    rule identifier_char
      '""' { def character; '"' end }
      /
      [^"] { def character; text_value end }
    end

    rule qualified_name
      schema_name '.' identifier {
        def name
          [ schema_name.name, identifier.name ].join '/'
        end
      }
      /
      table_name
    end

    rule schema_name
      identifier
    end

    rule table_name
      identifier
    end

    rule column_name
      identifier
    end
  end
end
