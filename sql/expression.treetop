module Sql
  grammar Expression
    include Space
    include Identifier
    include Keywords
    include Literals

    # ---------- EXPRESSION ----------

    rule scalar_expression
      gen_expression
    end

    rule gen_expression
      h:( gen_operator space )*
      gen_value
      r:( o:( space gen_operator )+ space gen_value )*
      t:( space gen_operator )*
      <Node::GenExpression>
    end

    rule gen_operator
      symbol_operator / keyword_operator
    end

    rule keyword_operator
      ( and_kw / or_kw / not_kw ) <Node::KeywordOperator>
    end

    rule symbol_operator
      sign_ending_operator / nonsign_ending_operator / single_char_operator
    end

    rule single_char_operator
      c:op_char <Node::SingleCharOperator>
    end

    rule sign_ending_operator
      b:( r:( basic_op_char !special_op_char )* basic_op_char )? special_op_char
      o:( r:( op_char !(sign_op_char !op_char) )* op_char )? sign_op_char !op_char
      <Node::SignEndingOperator>
    end

    rule nonsign_ending_operator
      r:( op_char !(nonsign_op_char !op_char) )* op_char nonsign_op_char !op_char
      <Node::NonsignEndingOperator>
    end

    rule sign_op_char
      c:[+\-] comment* <Node::OperatorChar>
    end

    rule basic_op_char
      c:[+\-*/<>=] comment* <Node::OperatorChar>
    end

    rule special_op_char
      c:[~!@#%^&|`?] comment* <Node::OperatorChar>
    end

    rule nonsign_op_char
      c:[*/<>=~!@#%^&|`?] comment* <Node::OperatorChar>
    end

    rule op_char
      c:[+\-*/<>=~!@#%^&|`?] comment* <Node::OperatorChar>
    end

    rule gen_value
      literal_value <Node::GenValue::Literal>
      /
      function_call <Node::GenValue::Function>
      /
      field_selection r:( space '['
        space range_expression space
      ']' )+ <Node::GenValue::Subscript>
      /
      field_selection <Node::GenValue::Field>
    end

    rule function_call
      type_cast
      /
      function_name space '('
        space function_params space
      ')' <Node::FunctionCall>
    end

    rule type_cast
      cast_kw space '('
        space scalar_expression space as_kw space type_name space
      ')' <Node::TypeCast>
    end

    rule type_name
      bigint_kw / boolean_kw / double_kw / float_kw /
      int_kw / real_kw / smallint_kw / string_kw /
      timestamp_kw / tinyint_kw / integer_kw <Node::TypeName>
    end

    rule function_name
      qualified_name / identifier
    end

    rule function_params
      aggregate_expression
      /
      expressions_list
      /
      void_expression
    end

    rule void_expression
      space <Node::VoidExpression>
    end

    rule aggregate_expression
      all_columns <Node::AllColumns>
      /
      (aggregate_specifier space)? expressions_list space order_by_clause
      <Node::AggregateExpression>
    end

    rule aggregate_specifier
      all_kw / distinct_kw
    end

    rule ordering_specifier
      ( asc_kw / desc_kw )?
      ( required_space nulls_kw required_space ( first_kw / last_kw ) )?
    end

    rule order_by_clause
      ( order_by_kw space expressions_list space ordering_specifier / space )
      <Node::OrderByClause>
    end

    rule expressions_list
      gen_expression r:( space ',' space gen_expression)* <Node::ExpressionsList>
    end

    rule range_expression
      b:scalar_expression space ':' space e:scalar_expression <Node::RangeExpression>
      /
      scalar_expression
    end

    rule field_selection
      row_value space '.' space field_identifier <Node::FieldSelection>
      /
      row_value
    end

    rule field_identifier
      all_fields / identifier
    end

    rule all_fields
      '*' <Node::AllFields>
    end

    rule row_value
      '(' query_expression ')' <Node::RowValue::Query>
      /
      '(' space gen_expression space ')' <Node::RowValue::Expression>
      /
      positional_param <Node::RowValue::Positional>
      /
      identifier <Node::RowValue::Identifier>
    end

    # ---------- SELECT ----------

    rule query
      space with_section space query_expression space <Node::Query>
    end

    rule with_section
      (with_kw required_space with_queries / space) <Node::WithSection>
    end

    rule with_queries
      with_query r:( space ',' space with_query )* <Node::WithQueries>
    end

    rule with_query
      identifier required_space as_kw required_space '('
        space query_expression space
      ')' <Node::WithQuery>
    end

    rule query_expression
      select_query
    end

    rule select_query
      select_kw required_space
      distinct_clause space
      select_list space
      table_expression space
      order_by_clause
      <Node::SelectQuery>
    end

    rule distinct_clause
      aggregate_specifier (
        required_space on_kw required_space '(' space expressions_list space ')'
      )?
      /
      space
    end

    rule select_list
      all_columns / named_expressions_list
    end

    rule named_expressions_list
      named_expression r:( space ',' space named_expression)*
      <Node::NamedExpressionsList>
    end

    rule named_expression
      gen_expression ( space (as_kw space)? column_name )? <Node::NamedExpression>
    end

    rule table_reference
      (table_spec space (as_kw space)? table_name space column_list?
      /
      qualified_name) <Node::TableReference>
    end

    rule all_columns
      '*' <Node::AllColumns>
    end

    rule table_expression
      from_clause space where_clause space group_by_clause <Node::TableExpression>
    end

    rule from_clause
      (from_kw required_space table_references / space) <Node::FromClause>
    end

    rule where_clause
      where_kw required_space scalar_expression / space
    end

    rule group_by_clause
      group_by_kw required_space expressions_list space having_clause / space
    end

    rule having_clause
      having_kw required_space scalar_expression / space
    end

    rule table_references
      table_joins r:( space ',' space table_joins )* <Node::TableReferences>
    end

    rule table_joins
      table_reference r:( space joined_table )* <Node::TableJoins>
    end

    rule table_reference
      (table_spec space (as_kw space)? table_name space column_list?
      /
      qualified_name) <Node::TableReference>
    end

    rule table_spec
      '(' space query_expression space ')' <Node::TableSpec::Query>
      /
      '(' space table_joins space ')' <Node::TableSpec::Joins>
      /
      qualified_name <Node::TableSpec::Table>
    end

    rule joined_table
      natural_join / predicate_join / columns_join
    end

    rule natural_join
      natural_kw space join_type space join_kw space table_reference <Node::Join>
    end

    rule predicate_join
      join_type space join_kw space table_reference space on_kw space scalar_expression <Node::Join>
    end

    rule columns_join
      join_type space join_kw space table_reference space using_kw space column_list <Node::Join>
    end

    rule join_type
      (left_kw / right_kw / full_kw) (space outer_kw)?
      /
      inner_kw
      /
      space
    end

    rule column_list
      '(' column_name r:( space ',' space column_name)* ')'
    end
  end
end
