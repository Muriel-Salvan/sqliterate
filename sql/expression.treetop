module Sql
  grammar Expression
    include Space
    include Identifier
    include Keywords
    include Literals

    # ---------- EXPRESSION ----------

    rule scalar_expression
      gen_expression
    end

    rule gen_expression
      r:( gen_term space )* {
        def value
          r.elements.map { |e| e.gen_term.value }
        end
      }
    end

    rule gen_term
      gen_operator / gen_value
    end

    rule gen_operator
      ( '*' / '/' / '+' / '-'
      / '=' / '<' / '>'
      / '~' / '!' / '@' / '#' / '%'
      / '^' / '&' / '|' / '?'
      / and_kw / or_kw / not_kw ) {
        def value
          text_value.to_sym
        end
      }
    end

    rule gen_value
      '(' select_query ')' {
        def value
          select_query.value
        end
      }
      /
      literal_value
      /
      function_call
      /
      field_value r:( space '[' space range_expression space ']' )+ {
        def value
          [:s, field_value.value] + r.elements.map do |e|
            e.range_expression.value
          end
        end
      }
      /
      field_value
    end

    rule function_call
      type_cast
      /
      function_name space '(' space aggregate_params space ')' {
        def value
          [function_name.name] + aggregate_params.value
        end
      }
    end

    rule type_cast
      cast_kw space '(' space scalar_expression space as_kw space type_name space ')' {
        def value
          [type_name.name, scalar_expression.value]
        end
      }
    end

    rule type_name
      bigint_kw / boolean_kw / double_kw / float_kw / int_kw / real_kw /
      smallint_kw / string_kw / timestamp_kw / tinyint_kw / integer_kw {
        def name
          text_value.to_sym
        end
      }
    end

    rule function_name
      qualified_name / identifier
    end

    rule aggregate_params
      (aggregate_specifier space)?
      function_params space order_by_kw space expressions_list
      (space ordering_specifier)? {
        def value
          [:a, function_params.value, expressions_list.value]
        end
      }
      /
      function_params
    end

    rule aggregate_specifier
      all_kw / distinct_kw
    end

    rule ordering_specifier
      asc_kw / desc_kw
    end

    rule expressions_list
      scalar_expression r:( space ',' space scalar_expression)* {
        def value
          [scalar_expression.value] + r.elements.map do |e|
            e.scalar_expression.value
          end
        end
      }
    end

    rule function_params
      gen_expression r:( space ',' space gen_expression )* {
        def value
          [gen_expression.value] + r.elements.map { |e| e.gen_expression.value }
        end
      }
      /
      space {
        def value
          []
        end
      }
    end

    rule range_expression
      b:gen_expression space ':' space e:gen_expression {
        def value
          [:r, b.value, e.value]
        end
      }
      /
      gen_expression
    end

    rule field_value
      terminal_value space '.' space identifier {
        def value
          [:f, terminal_value.value, identifier.name]
        end
      }
      /
      terminal_value
    end

    rule terminal_value
      '(' space gen_expression space ')' {
        def value
          gen_expression.value
        end
      }
      /
      positional_param
      /
      identifier {
        def value
          name
        end
      }
    end

    # ---------- SELECT ----------

    rule select_query
      space with_section space select_section space {
        def subqueries
          Hash[ with_section.tables.map { |t| [t.first, expand_table(t)] } ]
        end

        def columns
          select_section.columns
        end
        
        def tables
          cte = subqueries
          select_section.tables.flat_map { |t| expand_table(t) }
                               .flat_map { |t| cte[t] || [t] }
                               .sort.uniq
        end
        
        def expand_table(t)
          a, b = t
          b.is_a?(Array) ? b.flat_map { |x| expand_table(x) } : [a]
        end

        def value
          [:q]
        end
        
        def to_s
          "#{subqueries} | #{columns} | #{tables}"
        end
      }
    end

    rule with_section
      with_kw required_space with_queries {
        def tables
          with_queries.tables
        end
      }
      /
      space {
        def tables
          []
        end
      }
    end

    rule with_queries
      with_query r:( space ',' space with_query )* {
        def tables
          [with_query.table] + r.elements.map { |e| e.with_query.table }
        end
      }
    end

    rule with_query
      identifier required_space as_kw required_space '(' space select_query space ')' {
        def table
          [ identifier.name, select_query.tables ]
        end
      }
    end

    rule select_section
      select_kw required_space select_list space table_expression {
        def columns
          select_list.columns
        end
        def tables
          table_expression.tables
        end
      }
    end

    rule select_list
      expressions_list {
        def columns
          value
        end
      }
    end

    rule table_expression
      from_clause space where_clause space group_clause {
        def tables
          from_clause.tables
        end
        def filter
          where_clause.predicate
        end
      }
    end

    rule from_clause
      from_kw required_space table_references {
        def tables
          table_references.tables
        end
      }
      /
      space {
        def tables
          []
        end
      }
    end

    rule where_clause
      where_kw required_space scalar_expression {
        def predicate
          scalar_expression.value
        end
      }
      /
      space { def predicate; nil end }
    end

    rule group_clause
      space
    end

    rule table_references
      table_joins r:( space ',' space table_joins )* {
        def tables
          table_joins.tables + r.elements.flat_map { |e| e.table_joins.tables }
        end
      }
    end

    rule table_joins
      table_alias r:( space joined_table )* {
        def tables
          [table_alias.table] + r.elements.map { |e| e.joined_table.table }
        end
      }
    end

    rule table_alias
      table_spec space (as_kw space)? table_name space column_list? {
        def table
          [ table_name.name, table_spec.tables ]
        end
      }
      /
      qualified_name {
        def table
          [ name, [name] ]
        end
      }
    end

    rule table_spec
      '(' space select_query space ')' {
        def tables
          select_query.tables
        end
      }
      /
      '(' space table_joins space ')' {
        def tables
          table_joins.tables
        end
      }
      /
      qualified_name {
        def tables
          [name]
        end
      }
    end

    rule joined_table
      natural_join / predicate_join / columns_join
    end

    rule natural_join
      natural_kw space join_type space join_kw space table_alias {
        def table
          table_alias.table
        end
      }
    end

    rule predicate_join
      join_type space join_kw space table_alias space on_kw space scalar_expression {
        def table
          table_alias.table
        end
      }
    end

    rule columns_join
      join_type space join_kw space table_alias space using_kw space column_list {
        def table
          table_alias.table
        end
      }
    end

    rule join_type
      (left_kw / right_kw / full_kw) (space outer_kw)?
      /
      inner_kw
      /
      space
    end

    rule column_list
      '(' column_name r:( space ',' space column_name)* ')'
    end
  end
end
